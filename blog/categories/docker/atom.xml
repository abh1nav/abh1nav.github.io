<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: docker, | sqldump]]></title>
  <link href="http://blog.abhinav.ca/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://blog.abhinav.ca/"/>
  <updated>2014-06-19T10:52:14-04:00</updated>
  <id>http://blog.abhinav.ca/</id>
  <author>
    <name><![CDATA[Abhinav Ajgaonkar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Develop a NodeJS app with Docker]]></title>
    <link href="http://blog.abhinav.ca/blog/2014/06/17/develop-a-nodejs-app-with-docker/"/>
    <updated>2014-06-17T01:58:40-04:00</updated>
    <id>http://blog.abhinav.ca/blog/2014/06/17/develop-a-nodejs-app-with-docker</id>
    <content type="html"><![CDATA[<p>This is a somewhat detailed tutorial on using Docker as a replacement for <a href="http://www.vagrantup.com/">Vagrant</a> when developing a Node app using the <a href="http://expressjs.com/">Express</a> framework. To make things a bit more representative of the real world, the app will persist session information in Redis using the <a href="https://github.com/visionmedia/connect-redis">connect-redis</a> middleware.</p>

<h3>The Node App</h3>

<p>The app consists of a <code>package.json</code>, <code>server.js</code> and a <code>.gitignore</code> file, which is about as simple as it gets.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.gitignore </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node_modules/*</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>package.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;docker-dev&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.1.0&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;Docker Dev&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;connect-redis&quot;</span><span class="o">:</span> <span class="s2">&quot;~1.4.5&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;express&quot;</span><span class="o">:</span> <span class="s2">&quot;~3.3.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;hiredis&quot;</span><span class="o">:</span> <span class="s2">&quot;~0.1.15&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;redis&quot;</span><span class="o">:</span> <span class="s2">&quot;~0.8.4&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>server.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">express</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;),</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">(),</span>
</span><span class='line'><span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;redis&#39;</span><span class="p">),</span>
</span><span class='line'><span class="nx">RedisStore</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;connect-redis&#39;</span><span class="p">)(</span><span class="nx">express</span><span class="p">),</span>
</span><span class='line'><span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">).</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">cookieParser</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">keyboard</span><span class="o">-</span><span class="nx">cat</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;));</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">session</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>    <span class="nx">store</span><span class="o">:</span> <span class="k">new</span> <span class="nx">RedisStore</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">host</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_HOST</span> <span class="o">||</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">port</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_PORT</span> <span class="o">||</span> <span class="mi">6379</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">db</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_DB</span> <span class="o">||</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">}),</span>
</span><span class='line'>    <span class="nx">cookie</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">expires</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">maxAge</span><span class="o">:</span> <span class="mi">30</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">/&amp;rsquo;, function(req, res) {</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">status</span><span class="o">:</span> <span class="s2">&quot;ok&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">HTTP_PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Listening</span> <span class="nx">on</span> <span class="nx">port</span> <span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>server.js</code> pulls in all the dependencies and starts an express app. The express app is configured to store session information in Redis and exposes a single endpoint that returns a status message as JSON. Pretty standard stuff.</p>

<p>One thing to note here is that the connection information for redis can be overridden using environment variables &ndash; this will be useful later on when moving from dev to prod.</p>

<h3>The Dockerfile</h3>

<p>For development, we&rsquo;ll have redis and node running in the same container. To make this happen, we&rsquo;ll use a Dockerfile to configure the container.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Dockerfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM dockerfile/ubuntu&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>MAINTAINER Abhinav Ajgaonkar &lt;a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#97;&#98;&#104;&#105;&#x6e;&#x61;&#x76;&#51;&#x31;&#x36;&#64;&#103;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#x6d;">&#x61;&#x62;&#x68;&#x69;&#x6e;&#x61;&#118;&#51;&#49;&#54;&#x40;&#103;&#109;&#x61;&#105;&#108;&#46;&#99;&#111;&#109;&lt;/a>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Install Redis&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>RUN \&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>apt-get -y -qq install python redis-server
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;h1>Install Node&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>RUN \&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>cd /opt &amp;&amp; \
</span><span class='line'>wget http://nodejs.org/dist/v0.10.28/node-v0.10.28-linux-x64.tar.gz &amp;&amp; \
</span><span class='line'>tar -xzf node-v0.10.28-linux-x64.tar.gz &amp;&amp; \
</span><span class='line'>mv node-v0.10.28-linux-x64 node &amp;&amp; \
</span><span class='line'>cd /usr/local/bin &amp;&amp; \
</span><span class='line'>ln -s /opt/node/bin/* . &amp;&amp; \
</span><span class='line'>rm -f /opt/node-v0.10.28-linux-x64.tar.gz
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;h1>Set the working directory&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>WORKDIR /src&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>CMD [&ldquo;/bin/bash&rdquo;]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Taking it line by line,</p>

<p><code>
FROM dockerfile/ubuntu
</code></p>

<p>This tells docker to use the <code>dockerfile/ubuntu</code> image provided by Docker Inc. as the base image for the build.</p>

<p>```
RUN \</p>

<pre><code>apt-get -y -qq install python redis-server
</code></pre>

<p>```</p>

<p>The base image contains absolutely nothing- so we need to apt-get everything needed for our app to run. This statement installs python and redis-server. Redis server is required because we&rsquo;ll be storing session info in it and python is required by npm to be able to build the C-extension used by the redis node module.</p>

<p>```
RUN \</p>

<pre><code>cd /opt &amp;&amp; \
wget http://nodejs.org/dist/v0.10.28/node-v0.10.28-linux-x64.tar.gz &amp;&amp; \
tar -xzf node-v0.10.28-linux-x64.tar.gz &amp;&amp; \
mv node-v0.10.28-linux-x64 node &amp;&amp; \
cd /usr/local/bin &amp;&amp; \
ln -s /opt/node/bin/* . &amp;&amp; \
rm -f /opt/node-v0.10.28-linux-x64.tar.gz
</code></pre>

<p>```</p>

<p>This downloads and extracts the 64-bit NodeJS binaries.</p>

<p><code>
WORKDIR /src
</code></p>

<p>This tells docker to <code>cd /src</code> once the container has started, before executing what&rsquo;s specified in the <code>CMD</code> property.</p>

<p><code>
CMD ["/bin/bash"]
</code></p>

<p>Launch <code>/bin/bash</code> as a final step.</p>

<h3>Build and run the container</h3>

<p>Now that the docker file is written, let&rsquo;s build a Docker image.</p>

<p><code>
docker build -t sqldump/docker-dev:0.1 .
</code></p>

<p>Once the image done building, we can launch a container using:</p>

<p>```
docker run -i -t &mdash;rm \</p>

<pre><code>       -p 3000:3000 \
       -v `pwd`:/src \
       sqldump/docker-dev:0.1
</code></pre>

<p>```</p>

<p>Let&rsquo;s see what&rsquo;s going on in the docker run command.</p>

<p><code>-i</code> starts the container in interactive mode (versus -d for detached mode). This means the container will exit once the interactive sessions is over.</p>

<p><code>-t</code> allocates a pseudo-tty.</p>

<p><code>--rm</code> removes the container and its filesystem on exit.</p>

<p><code>-p 3000:3000</code> forwards port 3000 on to the host to port 3000 on the container.</p>

<p><code>
-v `pwd`:/src
</code></p>

<p>This mounts the current working directory in the host (i.e. our project files) to <code>/src</code> inside the container. We mount the current folder as a volume rather than using the <code>ADD</code> command in the Dockerfile so that any changes we make to the files in a text editor will be seen by the container right away.</p>

<p><code>sqldump/docker-dev:0.1</code> the name and version of the docker image to run &ndash; this is the same one we used when building the docker image.</p>

<p>Since the Dockerfile specifies <code>CMD ["/bin/bash"]</code>, we&rsquo;re dropped into a bash shell once the container has started. If the docker run command succeeds, it&rsquo;ll look something like this:</p>

<p><a href="/images/2014-06-17-Docker-Run.png"><img src="/images/2014-06-17-Docker-Run.png" width="482" height="139"></a></p>

<h3>Start Developing</h3>

<p>Now that the container is running, we&rsquo;ll need to get a few standard, non-docker related things sorted out before we can start writing code. First, start redis server inside the container using:</p>

<p><code>
service redis-server start
</code></p>

<p>Then, install project dependencies and <code>nodemon</code>. <a href="https://github.com/remy/nodemon">Nodemon</a> watches for changes in project files and restarts the server as needed.</p>

<p><code>
npm install
npm install -g nodemon
</code></p>

<p>Finally, start up the server using:</p>

<p><code>
nodemon server.js
</code></p>

<p>Now, if you go to <code>http://localhost:3000</code> in your browser, you should see something like this:</p>

<p><a href="/images/2014-06-17-First-Run.png"><img src="/images/2014-06-17-First-Run.png" width="230" height="110"></a></p>

<p>Let&rsquo;s add another endpoint to <code>server.js</code> to simulate development workflow:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>server.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="sr">/hello/</span><span class="o">:</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">hello</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You should see that nodemon has detected your changes and restarted the server:</p>

<p><a href="/images/2014-06-17-Reload.png"><img src="/images/2014-06-17-Reload.png" width="1072" height="390"></a></p>

<p>And now, if you point your browser to <code>http://localhost:3000/hello/world</code>, you should see the response:</p>

<p><a href="/images/2014-06-17-Second-Run.png"><img src="/images/2014-06-17-Second-Run.png" width="348" height="140"></a></p>

<h3>Production</h3>

<p>The container, in its current state, is nowehere near production-ready. The data in redis won&rsquo;t be persisted across container restarts, i.e. if you restart the container, you&rsquo;ll have effectively blown away all your session data. The same thing will happen if you destroy the container and start a new one. Presumably, this is not what you want. I&rsquo;ll cover production setup in another post.</p>
]]></content>
  </entry>
  
</feed>
